let data = { sections: [] };
let currentEditTarget = null;

function saveData() {
  const dataStr = JSON.stringify(data);
  window.accordionData = dataStr;
}

function loadData() {
  if (window.accordionData) {
    data = JSON.parse(window.accordionData);
  } else {
    data = { sections: [] };
  }
}

function saveOpenState() {
  const openIds = Array.from(
    document.querySelectorAll(".accordion-content.active")
  ).map((el) => el.id);
  window.accordionOpen = JSON.stringify(openIds);
}

function restoreOpenState() {
  if (!window.accordionOpen) return;
  JSON.parse(window.accordionOpen).forEach((id) => {
    const content = document.getElementById(id);
    if (content) {
      content.classList.add("active");
      content.previousElementSibling.classList.add("active");
      const icon =
        content.previousElementSibling.querySelector(".toggle-icon");
      if (icon) icon.textContent = "‚àí";
    }
  });
}

function parsePrefix(prefix) {
  const m = prefix.match(/^sec-(\d+)(?:-sub-(\d+)(?:-item-(\d+))?)?$/);
  return m
    ? {
      si: +m[1],
      sj: m[2] != null ? +m[2] : null,
      sk: m[3] != null ? +m[3] : null,
    }
    : {};
}

function createCrudButtons(prefix, level) {
  const addLabel =
    level === 1
      ? "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª"
      : level === 2
        ? "–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç"
        : "–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç";
  return `
          <button class="crud-btn add" onclick="onAdd('${prefix}')" title="${addLabel}">Ôºã</button>
          <button class="crud-btn edit" onclick="onEdit('${prefix}')" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
          <button class="crud-btn delete" onclick="onDelete('${prefix}')" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
        `;
}

function createAccordionItem(title, content, inner, level, id, prefix) {
  const isOpen = document
    .getElementById(id)
    ?.classList.contains("active");
  return `
          <div class="accordion-item level-${level}">
            <div class="accordion-toggle ${isOpen ? "active" : ""
    }" onclick="toggleAccordion('${id}')">
              <div class="toggle-left">
                <div class="toggle-title">${title}</div>
              </div>
              <div class="toggle-right">
                ${createCrudButtons(prefix, level)}
                <div class="toggle-icon">${isOpen ? "‚àí" : "+"}</div>
              </div>
            </div>
            <div class="accordion-content ${isOpen ? "active" : ""}" id="${id}">
              ${content ? `<div class="content-text">${content}</div>` : ""}
              ${inner}
            </div>
          </div>`;
}

function generateFromData() {
  const container = document.getElementById("accordion-container");
  let html = "";

  data.sections.forEach((sec, i) => {
    const secId = `sec-${i}`;
    const secPref = secId;
    let inner = "";

    if (sec.subsections && sec.subsections.length > 0) {
      sec.subsections.forEach((sub, j) => {
        const subId = `${secPref}-sub-${j}`;
        const subPref = subId;
        let subInner = "";

        if (sub.items && sub.items.length > 0) {
          sub.items.forEach((it, k) => {
            const itmId = `${subPref}-item-${k}`;
            const itmPref = itmId;
            subInner += createAccordionItem(
              `–≠–ª–µ–º–µ–Ω—Ç ${k + 1}: ${it.title || it}`,
              typeof it === "object" ? it.content : it,
              "",
              3,
              itmId,
              itmPref
            );
          });
        }

        inner += createAccordionItem(
          sub.title,
          sub.content || "",
          subInner,
          2,
          subId,
          subPref
        );
      });
    }

    html += createAccordionItem(
      sec.title,
      sec.content || "",
      inner,
      1,
      secId,
      secPref
    );
  });

  container.innerHTML = html;
  restoreOpenState();
}

function render() {
  loadData();
  generateFromData();
}

function toggleAccordion(id) {
  const c = document.getElementById(id);
  const t = c.previousElementSibling;
  const icon = t.querySelector(".toggle-icon");

  c.classList.toggle("active");
  t.classList.toggle("active");

  if (icon) {
    icon.textContent = c.classList.contains("active") ? "‚àí" : "+";
  }

  saveOpenState();
}

function addRootSection() {
  showEditModal("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é", "", "", (title, content) => {
    data.sections.push({
      title: title,
      content: content,
      subsections: [],
    });
    saveData();
    render();
  });
}

function onAdd(prefix) {
  const { si, sj, sk } = parsePrefix(prefix);

  if (sj === null) {
    showEditModal("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª", "", "", (title, content) => {
      data.sections[si].subsections.push({
        title: title,
        content: content,
        items: [],
      });
      saveData();
      render();
    });
  } else if (sk === null) {
    showEditModal("–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç", "", "", (title, content) => {
      data.sections[si].subsections[sj].items.push({
        title: title,
        content: content,
      });
      saveData();
      render();
    });
  } else {
    showEditModal("–î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç", "", "", (title, content) => {
      data.sections[si].subsections[sj].items.splice(sk + 1, 0, {
        title: title,
        content: content,
      });
      saveData();
      render();
    });
  }
}

function onEdit(prefix) {
  const { si, sj, sk } = parsePrefix(prefix);
  let currentTitle = "";
  let currentContent = "";

  if (sj === null) {
    currentTitle = data.sections[si].title;
    currentContent = data.sections[si].content || "";
  } else if (sk === null) {
    currentTitle = data.sections[si].subsections[sj].title;
    currentContent = data.sections[si].subsections[sj].content || "";
  } else {
    const item = data.sections[si].subsections[sj].items[sk];
    currentTitle = typeof item === "object" ? item.title : item;
    currentContent = typeof item === "object" ? item.content || "" : "";
  }

  showEditModal(
    "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
    currentTitle,
    currentContent,
    (title, content) => {
      if (sj === null) {
        data.sections[si].title = title;
        data.sections[si].content = content;
      } else if (sk === null) {
        data.sections[si].subsections[sj].title = title;
        data.sections[si].subsections[sj].content = content;
      } else {
        data.sections[si].subsections[sj].items[sk] = {
          title: title,
          content: content,
        };
      }
      saveData();
      render();
    }
  );
}

function onDelete(prefix) {
  const { si, sj, sk } = parsePrefix(prefix);

  if (!confirm(`–£–¥–∞–ª–∏—Ç—å "${prefix}"? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`))
    return;

  if (sj === null) {
    data.sections.splice(si, 1);
  } else if (sk === null) {
    data.sections[si].subsections.splice(sj, 1);
  } else {
    data.sections[si].subsections[sj].items.splice(sk, 1);
  }

  saveData();
  render();
}

function showEditModal(title, currentTitle, currentContent, onSave) {
  document.getElementById("modalTitle").textContent = title;
  document.getElementById("titleInput").value = currentTitle;
  document.getElementById("contentInput").value = currentContent;
  document.getElementById("editModal").classList.add("active");

  currentEditTarget = onSave;

  setTimeout(() => {
    document.getElementById("titleInput").focus();
  }, 100);
}

function saveEdit() {
  const title = document.getElementById("titleInput").value.trim();
  const content = document.getElementById("contentInput").value.trim();

  if (!title) {
    alert("–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
    return;
  }

  if (currentEditTarget) {
    currentEditTarget(title, content);
  }

  closeModal();
}

function closeModal() {
  document.getElementById("editModal").classList.remove("active");
  currentEditTarget = null;
}

document
  .getElementById("editModal")
  .addEventListener("click", function (e) {
    if (e.target === this) {
      closeModal();
    }
  });

document.addEventListener("keydown", function (e) {
  if (
    e.key === "Escape" &&
    document.getElementById("editModal").classList.contains("active")
  ) {
    closeModal();
  }
  if (
    e.key === "Enter" &&
    e.ctrlKey &&
    document.getElementById("editModal").classList.contains("active")
  ) {
    saveEdit();
  }
});

if (!window.accordionData) {
  data = {
    sections: [
      {
        title: "üî• –û–≥–æ–Ω—å",
        content: "–ú–∞–≥–∏—á–µ—Å–∫–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –æ–≥–Ω–µ–Ω–Ω–æ–π —Å—Ç–∏—Ö–∏–∏ –¥–ª—è –±–æ—è –∏ –∑–∞—â–∏—Ç—ã",
        subsections: [
          {
            title: "–ë–∞–∑–æ–≤—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è",
            content: "–ü—Ä–æ—Å—Ç—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –º–∞–≥–æ–≤",
            items: [
              {
                title: "–û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä",
                content:
                  "–ë–∞–∑–æ–≤–æ–µ –±–æ–µ–≤–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ. –°–æ–∑–¥–∞–µ—Ç —Å—Ñ–µ—Ä—É –ø–ª–∞–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É.",
              },
              {
                title: "–û–≥–Ω–µ–Ω–Ω–∞—è —Å—Ç–µ–Ω–∞",
                content:
                  "–ó–∞—â–∏—Ç–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ. –°–æ–∑–¥–∞–µ—Ç –±–∞—Ä—å–µ—Ä –∏–∑ –ø–ª–∞–º–µ–Ω–∏, –±–ª–æ–∫–∏—Ä—É—é—â–∏–π –ø—Ä–æ—Ö–æ–¥.",
              },
            ],
          },
          {
            title: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è",
            content: "–ú–æ—â–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö –º–∞–≥–æ–≤",
            items: [
              {
                title: "–ú–µ—Ç–µ–æ—Ä–∏—Ç",
                content:
                  "–ü—Ä–∏–∑—ã–≤–∞–µ—Ç –≥–æ—Ä—è—â–∏–π –∫–∞–º–µ–Ω—å —Å –Ω–µ–±–∞. –ù–∞–Ω–æ—Å–∏—Ç –º–∞—Å—Å–∏–≤–Ω—ã–π —É—Ä–æ–Ω –ø–æ –ø–ª–æ—â–∞–¥–∏.",
              },
            ],
          },
        ],
      },
      {
        title: "‚ùÑÔ∏è –õ—ë–¥",
        content: "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ª–µ–¥—è–Ω–æ–π –º–∞–≥–∏–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∏ —É—Ä–æ–Ω–∞",
        subsections: [
          {
            title: "–ë–∞–∑–æ–≤—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è",
            content: "–û—Å–Ω–æ–≤—ã –ª–µ–¥—è–Ω–æ–π –º–∞–≥–∏–∏",
            items: [
              {
                title: "–õ–µ–¥—è–Ω–æ–π —à–∞—Ä",
                content:
                  "–ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏ –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω —Ö–æ–ª–æ–¥–æ–º.",
              },
            ],
          },
          {
            title: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è",
            content: "–ú–æ—â–Ω–∞—è –ª–µ–¥—è–Ω–∞—è –º–∞–≥–∏—è",
            items: [
              {
                title: "–õ–µ–¥—è–Ω–æ–π —à—Ç–æ—Ä–º",
                content:
                  "–°–æ–∑–¥–∞–µ—Ç –º–µ—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–º–µ–¥–ª—è–µ—Ç –∏ –ø–æ–≤—Ä–µ–∂–¥–∞–µ—Ç –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –≤ –æ–±–ª–∞—Å—Ç–∏.",
              },
            ],
          },
        ],
      },
      {
        title: "‚ö° –ú–æ–ª–Ω–∏—è",
        content: "–ë—ã—Å—Ç—Ä—ã–µ –∏ —Ç–æ—á–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞",
        subsections: [
          {
            title: "–ë–∞–∑–æ–≤—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è",
            items: [
              {
                title: "–ú–æ–ª–Ω–∏—è",
                content: "–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞—Ç–∞–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ–º.",
              },
            ],
          },
          {
            title: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è",
            items: [
              {
                title: "–¶–µ–ø–Ω–∞—è –º–æ–ª–Ω–∏—è",
                content:
                  "–ú–æ–ª–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ—Å–∫–∞–∫–∏–≤–∞–µ—Ç –º–µ–∂–¥—É –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ü–µ–ª—è–º–∏.",
              },
            ],
          },
          {
            title: "–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è",
            content: "–î–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ —ç–ª–µ–∫—Ç—Ä–æ–º–∞–≥–∏–∏",
            items: [
              {
                title: "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π —à–æ–∫",
                content: "–ü–∞—Ä–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –º–æ—â–Ω—ã–º —Ä–∞–∑—Ä—è–¥–æ–º.",
              },
            ],
          },
        ],
      },
    ],
  };
  saveData();
}

render();